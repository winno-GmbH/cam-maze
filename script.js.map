{"version":3,"file":"script.js","mappings":"mBAAA,MAAM,EAA+BA,MCExBC,EAAWC,OAAOC,WAAa,IAwB/BC,GAVc,IAAI,UAAc,OAAS,GAAK,QAGjD,IAAI,UAAc,OAAS,IAAM,QACjC,IAAI,UAAc,MAAQ,IAAM,OAChC,IAAI,UAAc,OAAS,IAAM,SACjC,IAAI,UAAc,OAAS,IAAM,QACjC,IAAI,UAAc,OAAS,IAAM,SAGX,CAC9BC,YAAa,IAAI,UAAc,GAAK,IAAK,KACzCC,aAAc,IAAI,WAAe,EAAG,IAAK,GACzCC,aAAc,IAAI,UAAc,GAAK,IAAK,GAC1CC,cAAe,IAAI,WAAe,IAAK,EAAG,GAC1CC,aAAc,IAAI,UAAc,GAAK,IAAM,KAC3CC,cAAe,IAAI,WAAe,KAAM,GAAK,OAGlCC,EAAgBV,EACzBG,EAAiBC,YACjBD,EAAiBE,aAIRM,EAAiBX,EAC1BG,EAAiBK,aACjBL,EAAiBM,cAiBRG,EAAe,CAC1BC,cAAeC,SAASC,cAdT,qBAefC,OAAQF,SAASC,cAAc,UAC/BE,aAAcH,SAASC,cAZT,iBAadG,eAAgBJ,SAASC,cART,iBAWhBI,eAAgBL,SAASM,iBAdT,kBClDLC,EAAQ,IAAI,QAEZC,EAAW,IAAI,gBAAoB,CAC9CC,WAAW,EACXC,OAAO,EACPC,gBAAiB,mBACjBC,UAAW,UAeb,SAASC,IACP,MAAMC,EAAaC,KAAKC,IAAI7B,OAAO8B,iBAAkB/B,EAAW,EAAI,GACpEsB,EAASK,cAAcC,GAEnBhB,EAAaC,cACfS,EAASU,QACPpB,EAAaC,cAAcoB,YAC3BrB,EAAaC,cAAcqB,cAG7BZ,EAASU,QAAQ/B,OAAOC,WAAYD,OAAOkC,YAE/C,CAxBqB,IAAI,QCTzB,MAEaC,GAFS,IAAI,iBAEeC,KFO1B,2CELFC,EAAe,IAAI,qBAAyB,CACvDC,OAAQH,IAGGI,EAAc,IAAI,uBAA2B,CACxDC,MAAO,SACPC,UAAW,GACXC,UAAW,EACXC,gBAAiB,KAGNC,EAAgB,IAAI,uBAA2B,CAC1DJ,MAAO,SACPK,QAAS,EACTC,aAAa,EACbC,YAAY,EACZC,WAAW,EACXC,SAAU,iBACVC,KAAM,aACNR,UAAW,IACXD,UAAW,GACXU,aAAc,KAGHC,EAAgB,IAAI,uBAA2B,CAC1DZ,MAAO,SACPK,QAAS,GACTC,aAAa,EACbJ,UAAW,GACXD,UAAW,KAGPY,EAAkB,CACtBC,KAAM,IAAI,oBAAwB,CAChCd,MAAO,QACPM,aAAa,EACbD,QAAS,IAEXU,MAAO,IAAI,oBAAwB,CACjCf,MAAO,SACPM,aAAa,EACbD,QAAS,IAEXW,QAAS,IAAI,oBAAwB,CACnChB,MAAO,QACPM,aAAa,EACbD,QAAS,KAIAY,EAAc,CACzBC,qBAAsBL,EAAgBC,KACtC,uBAAwBD,EAAgBE,MACxC,uBAAwBF,EAAgBE,MACxC,oBAAqBF,EAAgBC,KACrC,iBAAkBD,EAAgBC,KAClC,iBAAkBD,EAAgBE,MAClCI,kBAAmBN,EAAgBE,MACnCK,kBAAmBP,EAAgBE,MACnC,2BAA4BF,EAAgBC,KAC5C,mBAAoBD,EAAgBC,KACpC,+BAAgCD,EAAgBE,MAChD,4BAA6BF,EAAgBE,MAC7C,yBAA0BF,EAAgBE,MAC1C,sBAAuBF,EAAgBE,MACvCC,QAASH,EAAgBC,MC1DrBO,GD6D6BC,MAAM,GAAGC,KAAKnB,GC7DlC,IAAI,cAEZ,IAAIoB,EAEJ,MAAMC,EAAS,IAAI,QAC1B7C,EAAM8C,IAAID,GAEH,MAAME,EAAyB,CACpCF,OAAQA,EACRG,OAAQ,IAAI,OAAW,IAAI,iBAAwBxB,GACnDyB,OAAQ,IAAI,OAAW,IAAI,iBAAwBzB,GACnD0B,OAAQ,IAAI,OAAW,IAAI,iBAAwB1B,GACnD2B,OAAQ,IAAI,OAAW,IAAI,iBAAwB3B,GACnD4B,OAAQ,IAAI,OAAW,IAAI,iBAAwB5B,IAG/C6B,EAAkB,CACtBC,UAAWP,EAAOC,OAClBO,UAAWR,EAAOE,OAClBO,UAAWT,EAAOG,OAClBO,UAAWV,EAAOI,OAClBO,UAAWX,EAAOK,QAGpBO,OAAOC,OAAOb,GAAQc,SAASC,GAAU9D,EAAM8C,IAAIgB,KC9B5C,MAAMC,EAAS,IAAI,oBJHX,GIKbnF,OAAOC,WAAaD,OAAOkC,YJHrB,KACD,KIYwBiD,EAAOC,WAAWC,SACpB,IAAI,cAAmBC,aAClD,IAAI,SAAa,OAAQ,EAAG,IClB9BC,iBACE,IJUIxF,EACFsB,EAASK,cAAcE,KAAKC,IAAI7B,OAAO8B,iBAAkB,IAEzDT,EAASK,cAAc1B,OAAO8B,kBAEhCT,EAASmE,UAAUC,SAAU,EAC7BpE,EAASmE,UAAUE,KAAO,mBAoB1BrE,EAASmE,UAAUC,SAAU,EAC7BpE,EAASmE,UAAUE,KAAO,mBAEtB/E,EAAaC,eACfS,EAASU,QACPpB,EAAaC,cAAcoB,YAC3BrB,EAAaC,cAAcqB,cAE7BtB,EAAaC,cAAc+E,YAAYtE,EAASuE,cAEhDvE,EAASU,QAAQ/B,OAAOC,WAAYD,OAAOkC,aAC3CrB,SAASgF,KAAKF,YAAYtE,EAASuE,aAGT,YAAxB/E,SAASiF,WACXjF,SAASkF,iBAAiB,mBAAoBrE,GAE9CA,IAEF1B,OAAO+F,iBAAiB,SAAUrE,GAG7B,WACL,MAAMsE,EAAe,IAAI,eAAmB,UAC5C5E,EAAM8C,IAAI8B,GAEV,MAAMC,EAAmB,IAAI,mBAAuB,SAAU,IAC9D7E,EAAM8C,IAAI+B,GACVA,EAAiBC,SAASC,KAAK,EAAG,GAAI,IACtCF,EAAiBG,OAAOC,QAAQC,MAAQ,KACxCL,EAAiBG,OAAOC,QAAQE,OAAS,KACzCN,EAAiBG,OAAOjB,OAAOqB,MAAQ,GACvCP,EAAiBG,OAAOjB,OAAOsB,MAAQ,GACvCR,EAAiBG,OAAOjB,OAAOuB,IAAM,GACrCT,EAAiBG,OAAOjB,OAAOwB,QAAU,GACzCV,EAAiBG,OAAOjB,OAAOyB,KAAO,GACtCX,EAAiBG,OAAOjB,OAAO0B,IAAM,GACrCZ,EAAiBG,OAAOU,MAAQ,KAChCb,EAAiBG,OAAOW,OAAS,EACjCd,EAAiBe,YAAa,CAChC,CI1EIC,SFiCG1B,iBACL,OAAO,IAAI2B,SAAQ,CAACC,EAASC,KAC3BvD,EAAOzB,KH7BE,gDG+BP,SAAUiF,GACR,MAAMC,EAAQD,EAAKjG,MAEnBkG,EAAMC,UAAUC,IACd,GAAmB,eAAfA,EAAMC,KAAuB,CAC/B,MAAMC,EAA6B,GACnCF,EAAMD,UAAUI,IACd,GACGA,EAAiBC,QACA,qBAAlBD,EAASF,MACS,6BAAlBE,EAASF,KACT,CACA,MAAMI,EACJpE,EAAYkE,EAASF,OACrBhE,EAAYD,QACbmE,EAAwBE,SAAWA,EACpCH,EAASI,KAAKH,EAChB,KACoB,qBAAlBA,EAASF,MACS,6BAAlBE,EAASF,OAETE,EAASI,SAAU,MAIvBL,EAASzC,SAAS+C,GAAS7D,EAAOF,OAAOC,IAAI8D,KAC7C7D,EAAOF,OAAOgE,MAAM9B,IAAI,IAAM,IAAM,KACpChC,EAAOF,OAAOiE,SAAS/B,IAAIvE,KAAKuG,GAAK,EAAGvG,KAAKuG,GAAK,EAAGvG,KAAKuG,GAAK,GAE/DnE,EAAc,IAAI,iBAAqBG,EAAOF,QAC9C,MAAMmE,EAA0D,CAAC,EAEjEf,EAAKgB,WAAWpD,SAASqD,IACvB,MAAMC,EAASvE,EAAYwE,WAAWF,GACtCF,EAAcE,EAAKb,MAAQc,EAC3BA,EAAOE,mBAAmB,GAC1BF,EAAOG,SAEX,MAAO,GACLlB,EAAMC,MACNhD,EAAgB+C,EAAMC,MACtB,CACA,MAAMkB,EACJlE,EAAgB+C,EAAMC,MAClBmB,EAAa,IAAI,QAEvBpB,EAAMU,SAASW,EAAIjH,KAAKuG,GACxBX,EAAMU,SAASY,EAAIlH,KAAKuG,GAAK,EAC7BX,EAAMS,MAAM9B,IAAI,IAAM,IAAM,KAE5B,MAAMuB,EAA6B,GACnCF,EAAMD,UAAUI,IACTA,EAAiBC,SAChBD,EAASF,MAAQE,EAASF,KAAKsB,WAAW,cAC3CpB,EAAwBE,SAAWjF,EAEpC+E,EAASF,MACT,CAAC,MAAO,MAAO,MAAO,MAAO,OAAOuB,SAASrB,EAASF,QAEtDE,EAASI,SAAU,GAErBL,EAASI,KAAKH,OAIlBD,EAASzC,SAAS+C,IAEdA,EAAKP,OACJO,EAAKP,KAAKuB,SAAS,QAClBhB,EAAKP,KAAKsB,WAAW,gBAEvBf,EAAKE,SAASW,EAAIjH,KAAKuG,GACvBH,EAAKE,SAASY,EAAIlH,KAAKuG,GAAK,GAE5BH,EAAKE,SAAS/B,IAAI,EAAG,EAAG,GAE1ByC,EAAW1E,IAAI8D,MAGjBW,EAAezE,IAAI0E,EACrB,CAEA,GAAKpB,EAAcI,OACjB,GAAmB,yBAAfJ,EAAMC,KACPD,EAAqBK,SAAWtF,EACjCiF,EAAMR,YAAa,OACd,GAAmB,4BAAfQ,EAAMC,KACdD,EAAqBK,SAAWxF,EACjCmF,EAAMR,YAAa,OACd,GAAmB,cAAfQ,EAAMC,KAAsB,CACrC,MAAMwB,EAAczB,EAAMnC,QAC1BmC,EAAMtB,SAASgD,GAAK,GACpB1B,EAAMtB,SAAS4C,EAAI,EACnBtB,EAAMtB,SAAS2C,EAAI,EAClBrB,EAAqBK,SAAW,IAAI,oBAAwB,CAC3DrF,MAAO,SACPK,QAAS,EACTC,aAAa,EACbC,YAAY,EACZC,WAAW,EACXE,KAAM,cAERsE,EAAM2B,eAAgB,EACtB3B,EAAMR,YAAa,EACnBQ,EAAMS,MAAM9B,IAAI,GAAK,GAAK,IAEzB8C,EAA2BpB,SAAWzE,EACvC6F,EAAY/C,SAASgD,GAAK,GAC1BD,EAAYE,eAAgB,EAC5B/H,EAAM8C,IAAI+E,EACZ,KAIJ3B,EAAMC,UAAS,SAAU6B,GAClBA,EAAaxB,SAChBwB,EAAKpC,YAAa,EAClBoC,EAAKD,eAAgB,EAEzB,IAEA/H,EAAM8C,IAAIoD,GACVA,EAAMpB,SAASC,IAAI,GAAK,GAAK,IAE7BgB,GACF,IACA,SAAUkC,GAAgB,IAC1B,SAAUC,GACRlC,EAAOkC,EACT,MAGN,CEvKUC,GDORpE,EAAOe,SAASsD,KAAK/I,GACrB0E,EAAOsE,OAAO/I,GCLZW,EAASqI,OAAOtI,EAAO+D,EACzB,CAAE,MAAOmE,GACPK,QAAQL,MAAM,wBAAyBA,EACzC,CACF,CAEAM,E","sources":["webpack://cam-3d-animation/external var \"THREE\"","webpack://cam-3d-animation/./src/config.ts","webpack://cam-3d-animation/./src/scene.ts","webpack://cam-3d-animation/./src/materials.ts","webpack://cam-3d-animation/./src/objects.ts","webpack://cam-3d-animation/./src/camera.ts","webpack://cam-3d-animation/./src/main.ts"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = THREE;","import * as THREE from \"three\";\n\nexport const isMobile = window.innerWidth < 768;\n\nexport const CAMERA_CONFIG = {\n  originalFOV: 50,\n  wideFOV: 80,\n  near: 0.001,\n  far: 1000,\n};\n\nexport const ASSETS = {\n  mazeTexture: \"https://c-am.b-cdn.net/CAM/matcap24.png\",\n  mazeModel: \"https://c-am.b-cdn.net/CAM/c-am-assets-3.glb\",\n};\n\nexport const MAZE_CENTER = new THREE.Vector3(0.45175, 0.5, 0.55675);\n\nexport const POV_POSITIONS = {\n  ghost1: new THREE.Vector3(0.65725, 0.55, 0.75325),\n  ghost2: new THREE.Vector3(0.9085, 0.55, 0.8035),\n  ghost3: new THREE.Vector3(0.75775, 0.55, 1.05475),\n  ghost4: new THREE.Vector3(0.65725, 0.55, 1.0045),\n  ghost5: new THREE.Vector3(0.15475, 0.55, 1.15525),\n};\n\nexport const CAMERA_POSITIONS = {\n  startMobile: new THREE.Vector3(0.5, 2.5, 2.5),\n  startDesktop: new THREE.Vector3(-2, 2.5, 2),\n  secondMobile: new THREE.Vector3(0.5, 2.5, 2),\n  secondDesktop: new THREE.Vector3(-1.5, 3, 2),\n  mobileLookAt: new THREE.Vector3(0.5, 0.5, -1.5),\n  desktopLookAt: new THREE.Vector3(-1.25, 0.5, 0.25),\n};\n\nexport const startPosition = isMobile\n  ? CAMERA_POSITIONS.startMobile\n  : CAMERA_POSITIONS.startDesktop;\nexport const secondPosition = isMobile\n  ? CAMERA_POSITIONS.secondMobile\n  : CAMERA_POSITIONS.secondDesktop;\nexport const lookAtPosition = isMobile\n  ? CAMERA_POSITIONS.mobileLookAt\n  : CAMERA_POSITIONS.desktopLookAt;\n\n// DOM Selectors\nexport const SELECTORS = {\n  mazeContainer: \".el--home-maze.el\",\n  homeSection: \".sc--home.sc\",\n  introSection: \".sc--intro.sc\",\n  povSection: \".sc--pov.sc\",\n  finalSection: \".sc--final.sc\",\n  scrollComponent: \".cmp--scroll.cmp\",\n  parentElements: \".cmp--pov.cmp\",\n  pov: \".pov\",\n  cam: \".cam\",\n  finalContainer: \".cr--final.cr\",\n};\n\n// DOM Elements\nexport const DOM_ELEMENTS = {\n  mazeContainer: document.querySelector(SELECTORS.mazeContainer) as HTMLElement,\n  canvas: document.querySelector(\"canvas\") as HTMLCanvasElement,\n  finalSection: document.querySelector(SELECTORS.finalSection) as HTMLElement,\n  finalContainer: document.querySelector(\n    SELECTORS.finalContainer\n  ) as HTMLElement,\n  parentElements: document.querySelectorAll(\n    SELECTORS.parentElements\n  ) as NodeListOf<Element>,\n};\n","import * as THREE from \"three\";\nimport { isMobile, DOM_ELEMENTS } from \"./config\";\n\nexport const scene = new THREE.Scene();\n\nexport const renderer = new THREE.WebGLRenderer({\n  antialias: true,\n  alpha: true,\n  powerPreference: \"high-performance\",\n  precision: \"highp\",\n});\n\nexport const clock = new THREE.Clock();\n\nfunction enhanceAntiAliasing(): void {\n  if (isMobile) {\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  } else {\n    renderer.setPixelRatio(window.devicePixelRatio);\n  }\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n}\n\nfunction setPixelRatio(): void {\n  const pixelRatio = Math.min(window.devicePixelRatio, isMobile ? 2 : 3);\n  renderer.setPixelRatio(pixelRatio);\n\n  if (DOM_ELEMENTS.mazeContainer) {\n    renderer.setSize(\n      DOM_ELEMENTS.mazeContainer.clientWidth,\n      DOM_ELEMENTS.mazeContainer.clientHeight\n    );\n  } else {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n  }\n}\n\nexport function initRenderer(): void {\n  enhanceAntiAliasing();\n\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n  if (DOM_ELEMENTS.mazeContainer) {\n    renderer.setSize(\n      DOM_ELEMENTS.mazeContainer.clientWidth,\n      DOM_ELEMENTS.mazeContainer.clientHeight\n    );\n    DOM_ELEMENTS.mazeContainer.appendChild(renderer.domElement);\n  } else {\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    document.body.appendChild(renderer.domElement);\n  }\n\n  if (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", setPixelRatio);\n  } else {\n    setPixelRatio();\n  }\n  window.addEventListener(\"resize\", setPixelRatio);\n}\n\nexport function setupLighting(): void {\n  const ambientLight = new THREE.AmbientLight(0xffffff);\n  scene.add(ambientLight);\n\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n  scene.add(directionalLight);\n  directionalLight.position.set(-5, 15, 10);\n  directionalLight.shadow.mapSize.width = 4096;\n  directionalLight.shadow.mapSize.height = 4096;\n  directionalLight.shadow.camera.left = -20;\n  directionalLight.shadow.camera.right = 20;\n  directionalLight.shadow.camera.top = 20;\n  directionalLight.shadow.camera.bottom = -20;\n  directionalLight.shadow.camera.near = 0.1;\n  directionalLight.shadow.camera.far = 50;\n  directionalLight.shadow.bias = -0.001;\n  directionalLight.shadow.radius = 3;\n  directionalLight.castShadow = true;\n}\n","import * as THREE from \"three\";\nimport { ASSETS } from \"./config\";\n\nconst textureLoader = new THREE.TextureLoader();\n\nexport const mazeTexture = textureLoader.load(ASSETS.mazeTexture);\n\nexport const mazeMaterial = new THREE.MeshMatcapMaterial({\n  matcap: mazeTexture,\n});\n\nexport const topMaterial = new THREE.MeshStandardMaterial({\n  color: 0xf2f9f9,\n  metalness: 0.4,\n  roughness: 0,\n  envMapIntensity: 10,\n});\n\nexport const ghostMaterial = new THREE.MeshPhysicalMaterial({\n  color: 0xffffff,\n  opacity: 1,\n  transparent: true,\n  depthWrite: false,\n  depthTest: true,\n  blending: THREE.NormalBlending,\n  side: THREE.DoubleSide,\n  roughness: 0.75,\n  metalness: 0.2,\n  transmission: 0.5,\n});\n\nexport const floorMaterial = new THREE.MeshStandardMaterial({\n  color: 0xffffff,\n  opacity: 0.8,\n  transparent: true,\n  roughness: 0.5,\n  metalness: 0.1,\n});\n\nconst pacmanMaterials = {\n  blue: new THREE.MeshBasicMaterial({\n    color: 0x1469d3,\n    transparent: true,\n    opacity: 1,\n  }),\n  white: new THREE.MeshBasicMaterial({\n    color: 0xffffff,\n    transparent: true,\n    opacity: 1,\n  }),\n  default: new THREE.MeshBasicMaterial({\n    color: 0x1469d3,\n    transparent: true,\n    opacity: 1,\n  }),\n};\n\nexport const materialMap = {\n  CAM_Pacman_Backframe: pacmanMaterials.blue,\n  \"CAM-Pacman_Bitcoin_1\": pacmanMaterials.white,\n  \"CAM-Pacman_Bitcoin_2\": pacmanMaterials.white,\n  \"CAM-Pacman_Bottom\": pacmanMaterials.blue,\n  \"CAM-Pacman_Top\": pacmanMaterials.blue,\n  \"CAM-Pacman_Eye\": pacmanMaterials.white,\n  CAM_Pacman_Logo_1: pacmanMaterials.white,\n  CAM_Pacman_Logo_2: pacmanMaterials.white,\n  \"CAM-Pacman_Shell_Boolean\": pacmanMaterials.blue,\n  \"CAM-Pacman_Shell\": pacmanMaterials.blue,\n  \"CAM-Pacman_Bottom_electronic\": pacmanMaterials.white,\n  \"CAM-Pacman_Top_electronic\": pacmanMaterials.white,\n  \"CAM-Pacman_Bottom_Text\": pacmanMaterials.white,\n  \"CAM-Pacman_Top_Text\": pacmanMaterials.white,\n  default: pacmanMaterials.blue,\n};\n\nexport const ghostCoverMaterials = Array(5).fill(ghostMaterial);\n","import * as THREE from \"three\";\nimport { ASSETS } from \"./config\";\nimport { GhostContainer } from \"./types\";\nimport { scene, clock } from \"./scene\";\nimport {\n  mazeMaterial,\n  topMaterial,\n  ghostMaterial,\n  floorMaterial,\n  materialMap,\n} from \"./materials\";\n\nexport { clock };\n\nconst loader = new THREE.GLTFLoader();\n\nexport let pacmanMixer: THREE.AnimationMixer;\n\nexport const pacman = new THREE.Group();\nscene.add(pacman);\n\nexport const ghosts: GhostContainer = {\n  pacman: pacman,\n  ghost1: new THREE.Mesh(new THREE.BufferGeometry(), ghostMaterial),\n  ghost2: new THREE.Mesh(new THREE.BufferGeometry(), ghostMaterial),\n  ghost3: new THREE.Mesh(new THREE.BufferGeometry(), ghostMaterial),\n  ghost4: new THREE.Mesh(new THREE.BufferGeometry(), ghostMaterial),\n  ghost5: new THREE.Mesh(new THREE.BufferGeometry(), ghostMaterial),\n};\n\nconst ghostContainers = {\n  Ghost_EUR: ghosts.ghost1,\n  Ghost_CHF: ghosts.ghost2,\n  Ghost_YEN: ghosts.ghost3,\n  Ghost_USD: ghosts.ghost4,\n  Ghost_GBP: ghosts.ghost5,\n};\n\nObject.values(ghosts).forEach((ghost) => scene.add(ghost));\n\nexport async function loadModel(): Promise<void> {\n  return new Promise((resolve, reject) => {\n    loader.load(\n      ASSETS.mazeModel,\n      function (gltf) {\n        const model = gltf.scene;\n\n        model.traverse((child: THREE.Object3D) => {\n          if (child.name === \"CAM-Pacman\") {\n            const children: THREE.Object3D[] = [];\n            child.traverse((subChild: THREE.Object3D) => {\n              if (\n                (subChild as any).isMesh &&\n                subChild.name !== \"CAM-Pacman_Shell\" &&\n                subChild.name !== \"CAM-Pacman_Shell_Boolean\"\n              ) {\n                const material =\n                  materialMap[subChild.name as keyof typeof materialMap] ||\n                  materialMap.default;\n                (subChild as THREE.Mesh).material = material;\n                children.push(subChild);\n              } else if (\n                subChild.name === \"CAM-Pacman_Shell\" ||\n                subChild.name === \"CAM-Pacman_Shell_Boolean\"\n              ) {\n                subChild.visible = false;\n              }\n            });\n\n            children.forEach((item) => ghosts.pacman.add(item));\n            ghosts.pacman.scale.set(0.05, 0.05, 0.05);\n            ghosts.pacman.rotation.set(Math.PI / 2, Math.PI / 2, Math.PI / 4);\n\n            pacmanMixer = new THREE.AnimationMixer(ghosts.pacman);\n            const pacmanActions: { [key: string]: THREE.AnimationAction } = {};\n\n            gltf.animations.forEach((clip: THREE.AnimationClip) => {\n              const action = pacmanMixer.clipAction(clip);\n              pacmanActions[clip.name] = action;\n              action.setEffectiveWeight(1);\n              action.play();\n            });\n          } else if (\n            child.name &&\n            ghostContainers[child.name as keyof typeof ghostContainers]\n          ) {\n            const ghostContainer =\n              ghostContainers[child.name as keyof typeof ghostContainers];\n            const ghostGroup = new THREE.Group();\n\n            child.rotation.z = Math.PI;\n            child.rotation.x = Math.PI / 2;\n            child.scale.set(0.75, 0.75, 0.75);\n\n            const children: THREE.Object3D[] = [];\n            child.traverse((subChild: THREE.Object3D) => {\n              if ((subChild as any).isMesh) {\n                if (subChild.name && subChild.name.startsWith(\"Ghost_Mesh\")) {\n                  (subChild as THREE.Mesh).material = ghostMaterial;\n                } else if (\n                  subChild.name &&\n                  [\"EUR\", \"CHF\", \"YEN\", \"USD\", \"GBP\"].includes(subChild.name)\n                ) {\n                  subChild.visible = false;\n                }\n                children.push(subChild);\n              }\n            });\n\n            children.forEach((item) => {\n              if (\n                item.name &&\n                (item.name.includes(\"EUR\") ||\n                  item.name.startsWith(\"Ghost_Mesh\"))\n              ) {\n                item.rotation.z = Math.PI;\n                item.rotation.x = Math.PI / 2;\n              } else {\n                item.rotation.set(0, 0, 0);\n              }\n              ghostGroup.add(item);\n            });\n\n            ghostContainer.add(ghostGroup);\n          }\n\n          if ((child as any).isMesh) {\n            if (child.name === \"CAM-Arena_LowRes_Top\") {\n              (child as THREE.Mesh).material = topMaterial;\n              child.castShadow = true;\n            } else if (child.name === \"CAM-Arena_LowRes_Bottom\") {\n              (child as THREE.Mesh).material = mazeMaterial;\n              child.castShadow = true;\n            } else if (child.name === \"CAM-Floor\") {\n              const clonedChild = child.clone();\n              child.position.y = -0.1;\n              child.position.x = 0;\n              child.position.z = 0;\n              (child as THREE.Mesh).material = new THREE.MeshBasicMaterial({\n                color: 0xffffff,\n                opacity: 1,\n                transparent: false,\n                depthWrite: true,\n                depthTest: true,\n                side: THREE.FrontSide,\n              });\n              child.receiveShadow = false;\n              child.castShadow = true;\n              child.scale.set(0.5, 0.5, 0.5);\n\n              (clonedChild as THREE.Mesh).material = floorMaterial;\n              clonedChild.position.y = -0.5;\n              clonedChild.receiveShadow = true;\n              scene.add(clonedChild);\n            }\n          }\n        });\n\n        model.traverse(function (node: THREE.Object3D) {\n          if ((node as any).isMesh) {\n            node.castShadow = true;\n            node.receiveShadow = true;\n          }\n        });\n\n        scene.add(model);\n        model.position.set(0.5, 0.5, 0.5);\n\n        resolve();\n      },\n      function (progress: any) {},\n      function (error: any) {\n        reject(error);\n      }\n    );\n  });\n}\n","import * as THREE from \"three\";\nimport {\n  CAMERA_CONFIG,\n  startPosition,\n  secondPosition,\n  lookAtPosition,\n} from \"./config\";\n\nexport const camera = new THREE.PerspectiveCamera(\n  CAMERA_CONFIG.originalFOV,\n  window.innerWidth / window.innerHeight,\n  CAMERA_CONFIG.near,\n  CAMERA_CONFIG.far\n);\n\nexport function initCamera(): void {\n  camera.position.copy(startPosition);\n  camera.lookAt(lookAtPosition);\n}\n\nexport const startQuaternion = camera.quaternion.clone();\nexport const endQuaternion = new THREE.Quaternion().setFromEuler(\n  new THREE.Euler(-1.5708, 0, 0)\n);\n\nexport function getCameraLookAtPoint(): THREE.Vector3 {\n  const direction = new THREE.Vector3(0, 0, -1);\n  direction.applyQuaternion(camera.quaternion);\n  const lookAtPoint = new THREE.Vector3();\n  lookAtPoint.copy(camera.position).add(direction.multiplyScalar(10));\n  return lookAtPoint;\n}\n\nexport function setupCameraResize(): void {\n  const updateCamera = () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n  };\n\n  window.addEventListener(\"resize\", updateCamera);\n}\n","import { initRenderer, setupLighting, renderer, scene } from \"./scene\";\nimport { loadModel } from \"./objects\";\nimport { camera, initCamera } from \"./camera\";\n\nasync function init() {\n  try {\n    initRenderer();\n    setupLighting();\n\n    await loadModel();\n\n    initCamera();\n    renderer.render(scene, camera);\n  } catch (error) {\n    console.error(\"Initialization error:\", error);\n  }\n}\n\ninit();\n"],"names":["THREE","isMobile","window","innerWidth","CAMERA_POSITIONS","startMobile","startDesktop","secondMobile","secondDesktop","mobileLookAt","desktopLookAt","startPosition","lookAtPosition","DOM_ELEMENTS","mazeContainer","document","querySelector","canvas","finalSection","finalContainer","parentElements","querySelectorAll","scene","renderer","antialias","alpha","powerPreference","precision","setPixelRatio","pixelRatio","Math","min","devicePixelRatio","setSize","clientWidth","clientHeight","innerHeight","mazeTexture","load","mazeMaterial","matcap","topMaterial","color","metalness","roughness","envMapIntensity","ghostMaterial","opacity","transparent","depthWrite","depthTest","blending","side","transmission","floorMaterial","pacmanMaterials","blue","white","default","materialMap","CAM_Pacman_Backframe","CAM_Pacman_Logo_1","CAM_Pacman_Logo_2","loader","Array","fill","pacmanMixer","pacman","add","ghosts","ghost1","ghost2","ghost3","ghost4","ghost5","ghostContainers","Ghost_EUR","Ghost_CHF","Ghost_YEN","Ghost_USD","Ghost_GBP","Object","values","forEach","ghost","camera","quaternion","clone","setFromEuler","async","shadowMap","enabled","type","appendChild","domElement","body","readyState","addEventListener","ambientLight","directionalLight","position","set","shadow","mapSize","width","height","left","right","top","bottom","near","far","bias","radius","castShadow","setupLighting","Promise","resolve","reject","gltf","model","traverse","child","name","children","subChild","isMesh","material","push","visible","item","scale","rotation","PI","pacmanActions","animations","clip","action","clipAction","setEffectiveWeight","play","ghostContainer","ghostGroup","z","x","startsWith","includes","clonedChild","y","receiveShadow","node","progress","error","loadModel","copy","lookAt","render","console","init"],"sourceRoot":""}